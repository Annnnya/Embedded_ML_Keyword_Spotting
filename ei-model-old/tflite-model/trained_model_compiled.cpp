/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 03.05.2023 18:55:58

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 3888;
#else
constexpr int kTensorArenaSize = 2864;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,1040 } };
const TfArray<1, float> quant0_scale = { 1, { 0.041530013084411621, } };
const TfArray<1, int> quant0_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 80, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 80, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 40, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 40, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 320, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*13] = { 
  /* [0][0][][] */ -61,34,-74,-1,53,-40,37,63,48,-46,-47,55,-9, 82,-13,-87,-95,-42,-13,-47,-75,18,-28,-19,88,98, -74,12,-3,-102,-81,20,-46,-14,61,23,-127,-85,-11, 
  /* [1][0][][] */ 65,73,5,-13,-35,34,-9,-55,-6,56,-25,-115,54, 83,49,87,19,-61,61,-45,-58,64,-35,-108,63,48, 54,73,-27,127,-64,-23,-3,-12,-30,-34,-19,1,2, 
  /* [2][0][][] */ 24,-91,-100,93,-114,-93,-114,30,-74,-39,-17,107,70, 51,-21,-127,53,54,6,73,-31,32,-13,60,-2,-58, 18,-96,-83,-19,-60,39,77,-67,-37,34,-34,-32,2, 
  /* [3][0][][] */ -127,105,-24,109,43,-69,-24,19,-47,54,27,6,-11, 27,112,-39,70,-11,-72,-53,-9,29,73,-54,63,-12, -73,30,-40,81,1,7,-9,-44,-27,44,-22,58,-19, 
  /* [4][0][][] */ 5,53,-46,49,91,-77,30,23,-127,-10,54,94,-8, 34,6,-47,19,-90,-17,-33,43,-6,-14,-54,22,-13, -27,-35,99,-102,5,-72,97,-52,-85,-120,118,80,-83, 
  /* [5][0][][] */ 68,10,117,43,25,-16,-83,-55,26,-121,-26,-31,38, 3,-30,70,26,104,-61,47,10,-13,19,-33,-38,-97, 82,-40,29,15,127,59,-101,18,-57,70,-37,-73,-69, 
  /* [6][0][][] */ -99,-44,-85,-127,-13,9,109,17,-48,82,-29,70,-6, -52,75,48,15,-10,-9,-49,-76,8,-7,41,10,-57, -97,27,110,-90,-113,-108,-22,76,10,68,26,-47,-44, 
  /* [7][0][][] */ -38,-72,-23,27,34,-63,-18,16,-19,31,-48,-25,-20, 58,-50,2,-65,44,44,-52,60,-11,59,113,54,12, -70,-127,59,39,-27,-22,49,-62,-20,-37,95,-45,8, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0031589667778462172, 0.0031329318881034851, 0.0028364402242004871, 0.0036179153248667717, 0.002898587379604578, 0.0026532639749348164, 0.0032427818514406681, 0.0038458516355603933, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -503, 131, -42, 374, -330, 216, -1038, -698, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00013119193317834288, 0.00013011069677304476, 0.00011779739725170657, 0.00015025207540020347, 0.0001203783685923554, 0.00011019008525181562, 0.00013467276585288346, 0.00015971827087923884, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ -89,-58,-79,101,-32,-101,127,-42, 63,-38,-99,14,-37,-87,36,-54, 46,-99,94,104,31,91,116,9, 
  /* [1][0][][] */ -96,127,-86,-53,-4,7,66,37, -95,-3,-47,5,-40,70,-28,-4, 13,113,9,95,41,20,-52,-7, 
  /* [2][0][][] */ -76,78,-102,-53,27,127,-57,-34, 44,-11,-45,79,28,-14,-75,109, -33,-64,-57,-78,-1,34,4,48, 
  /* [3][0][][] */ -86,32,-26,49,-49,60,-19,72, -56,-24,-10,127,26,85,63,-2, -23,-63,6,19,-51,47,73,-14, 
  /* [4][0][][] */ -14,-3,92,-24,58,-58,-42,76, -101,-33,40,-16,-28,-71,7,123, 74,-101,114,85,-60,89,-91,127, 
  /* [5][0][][] */ 34,-48,-72,46,126,116,-10,127, -114,-98,-72,50,93,94,-92,-41, -58,-6,55,-22,86,16,-119,100, 
  /* [6][0][][] */ 85,67,50,66,44,24,-61,75, 41,-8,61,-127,23,95,-4,-115, -52,116,0,-85,82,-90,-38,-46, 
  /* [7][0][][] */ -9,-53,127,-36,-2,83,101,34, 79,-50,-54,-24,113,45,113,-87, -67,-56,-43,-23,66,29,-17,96, 
  /* [8][0][][] */ -84,-45,87,-34,-11,-10,16,127, -26,-59,-74,80,72,4,45,97, 19,-61,24,-50,-15,-83,82,50, 
  /* [9][0][][] */ -53,-27,39,-4,86,69,-116,-6, 6,113,127,-42,46,40,52,-44, -48,15,94,24,38,4,9,-4, 
  /* [10][0][][] */ 26,2,51,1,16,-104,-28,26, 127,13,16,18,114,2,103,-73, -1,-1,-46,-55,-43,-41,116,-38, 
  /* [11][0][][] */ 7,-46,-24,42,-27,-65,100,-8, -42,26,27,-47,-48,-36,45,82, 32,-2,-115,44,64,-108,127,21, 
  /* [12][0][][] */ 81,62,-127,-26,93,110,17,-88, -24,11,85,-29,118,-89,99,26, 21,60,-63,-59,15,92,-20,62, 
  /* [13][0][][] */ -11,34,-25,127,-32,-47,31,-30, -45,-5,10,41,57,3,-6,-21, -24,-18,-11,117,11,7,53,-28, 
  /* [14][0][][] */ 32,76,52,49,-78,111,-79,-127, 48,103,-47,7,49,12,-51,-58, -39,116,51,-46,-22,49,-1,-35, 
  /* [15][0][][] */ 127,56,-20,28,-28,-78,-42,-50, 28,13,18,-84,115,101,125,6, 99,-68,72,-127,-32,79,-58,45, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0025333445519208908, 0.0029430242720991373, 0.0029158501420170069, 0.00322702806442976, 0.0023667626082897186, 0.0022965229582041502, 0.0022018963936716318, 0.0027171827387064695, 0.0029013482853770256, 0.0031241353135555983, 0.0030043476726859808, 0.0029256136622279882, 0.0022248039022088051, 0.0037320267874747515, 0.003043976379558444, 0.0025377417914569378, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { 445, -438, 505, -634, -1108, -661, 302, -675, -489, -426, -1217, -488, -851, 1254, 154, -555, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 8.4431339928414673e-05, 9.8085147328674793e-05, 9.717948705656454e-05, 0.00010755042603705078, 7.8879493230488151e-05, 7.6538541179616004e-05, 7.3384828283451498e-05, 9.0558300144039094e-05, 9.6696167020127177e-05, 0.00010412121628178284, 0.00010012893471866846, 9.7504889708943665e-05, 7.414828723995015e-05, 0.0001243810256710276, 0.00010144968109671026, 8.4577884990721941e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[9*320] = { 
  2, 65, 31, 5, 2, -17, 8, -3, -45, 9, -18, 8, -33, 29, 58, -15, -10, -11, -16, -6, -48, 12, 21, -15, -41, -5, -29, 15, 14, 49, 54, -6, -20, 19, -20, -33, -15, 25, 0, -19, -61, -33, -4, 9, 3, 59, 32, -42, 1, 15, -23, 35, -48, -14, -13, 20, -17, 15, 54, -12, 16, 15, -23, -34, 8, -13, 62, -21, -42, 19, -8, 14, -11, -61, 23, -6, -7, 50, -8, -43, 16, -5, -54, 0, -15, 17, -14, 5, 34, 15, -3, -9, 0, 56, 15, -37, 41, -23, -25, -7, 3, -29, 7, 8, -22, -11, -5, 35, -32, -16, -16, -20, 13, 17, 14, 35, 20, 21, -5, 2, 51, 3, -22, 22, -41, 22, 10, 10, -2, 26, 52, 16, -20, 0, 13, 3, 5, -20, 3, 16, -52, -9, -24, -6, 16, -11, 44, 8, 31, 12, -35, -4, 29, 2, -55, -13, -28, 32, -30, -6, -16, 33, 55, 28, -9, 31, -38, 23, 23, -37, -39, 23, 35, 3, -34, -33, -22, 28, 82, 28, -31, 17, -3, -19, 29, -5, -47, 8, 12, 32, -16, 16, -52, 39, 34, 10, 0, 18, -38, 5, 14, 4, -24, -41, 1, 2, 13, -45, -18, 38, 29, -2, 19, 26, 17, 6, -17, 15, -3, -66, 20, -5, 52, 23, -19, 20, 17, 8, 29, 59, -11, -16, -21, 27, -2, -21, 16, -3, 4, -11, 31, 0, 61, 13, -8, 20, 35, -41, -25, -1, -59, -62, 28, -23, 53, 5, -51, 13, -11, 27, 3, -10, -17, -1, -16, 49, -8, 1, -14, -62, 42, 48, -33, -26, -16, -22, -2, -14, 61, 26, -28, 18, 15, -35, -18, -8, -7, -56, 28, 12, -27, -19, 2, -53, 3, -29, -43, -43, 53, -14, -13, 40, 26, -13, -23, -8, 3, 10, 11, -4, 28, -6, -40, -14, 52, -22, 29, 45, 7, 16, 
  27, -39, 31, 22, 42, 32, -31, 15, 16, -23, -32, 35, -1, 31, -40, 4, -1, -8, 14, 23, 35, 45, -30, 30, -1, -6, -42, 19, -17, 14, -72, 7, 45, -2, 45, 50, 38, 40, -55, 32, -12, 1, 3, -10, -25, 10, -7, -46, -51, 25, 55, 16, 35, 65, 14, -14, 44, -36, -15, -4, 5, -3, -67, -26, 25, -12, -18, -4, 27, 32, -47, 8, 43, -19, -8, -11, -33, 28, -67, -38, -20, -14, -32, 29, 20, 0, -6, 20, 68, 5, -43, 45, 11, -42, -9, -4, 25, 2, 14, -33, 3, -11, -36, -8, 35, -20, 36, 40, -16, -8, 20, 8, 28, 23, 0, 3, 7, 10, -4, -3, 3, -2, 22, 40, -1, -8, 15, 41, -6, 33, 45, 12, -19, -7, 13, 7, 30, -22, -8, 35, 2, -4, -2, 36, -13, 42, -22, -10, -40, -23, -3, 10, 25, 4, -25, -9, 19, -47, 7, -3, -8, 4, -5, 11, -31, -41, -12, -14, -79, -7, -27, -35, 37, -44, 18, 9, -25, -2, 29, -48, -42, -4, 1, -73, -99, -64, -10, -46, -39, -102, 19, -18, -44, 39, -32, -47, -73, -6, 4, -76, -53, -20, -36, -26, 20, -9, 5, -9, -60, 15, -43, -58, -71, -29, 33, -44, -5, -10, 13, -68, 9, -81, 63, -29, -11, -16, -30, -51, -55, -10, 40, -68, -58, 7, -1, -25, 9, -27, 46, 5, 1, -30, -38, -31, -4, -12, 36, 8, -54, 9, -6, -50, 10, -68, 10, 67, -52, -21, -29, 14, -17, -50, -26, -1, -69, 12, 12, -72, 25, -34, 40, 15, 24, 6, 30, 50, 20, 35, -8, 43, -29, -16, -34, -33, 29, -29, 39, 2, 12, -1, 40, 74, 28, 7, -10, 22, 0, 34, -8, -21, 13, 2, 3, -20, 12, -25, 32, 36, 56, 32, -40, 43, 25, 52, -8, -26, -9, 51, -17, -12, 
  -37, 44, -35, -15, -18, -25, 66, -9, -47, 56, 47, -14, 8, -43, 27, -13, -34, 41, 24, 32, -11, -7, 15, 25, -9, -9, -8, 9, 36, 27, 67, -15, -38, -39, 8, 7, 18, 10, 5, 24, -15, 56, 33, -20, 18, 28, 78, 41, -27, -28, 12, 1, -16, 24, 10, 33, 8, 39, 14, -41, 7, -46, 12, 15, -15, -31, 27, 19, -23, -24, 34, -3, -27, -15, -31, -30, 1, 12, 38, 6, -6, -49, 1, -46, 2, -8, 44, 21, 25, 34, -11, -27, -5, -67, 11, 7, -17, -53, -69, -65, -3, -2, 24, 3, -8, -29, -62, -10, -25, -103, -27, -20, -68, -79, -48, 7, 0, -8, 2, 25, -14, 22, -15, 26, -2, -85, 20, 4, 20, 8, -26, -16, -2, 27, 32, 14, -21, 3, -28, 24, -20, -87, -2, 39, -12, 27, -7, -6, 25, 26, 0, 0, 8, -7, -24, 43, -7, -21, 17, 26, -21, -2, 14, -22, 43, 15, 27, 31, 5, 16, 0, 36, 41, -9, 1, 35, 44, -19, 1, -12, 42, 26, 23, -6, 31, 20, -2, -9, 33, -29, 17, 2, -27, 0, 30, -3, 3, 31, 10, 48, 32, 15, 32, 8, -19, -23, 23, -30, -19, 2, 26, 36, -9, -18, -28, 10, 15, -84, -12, -20, -50, 41, -59, -42, 18, -57, 0, 37, 34, 39, -96, -17, 18, -64, -8, 7, -82, 10, -41, -49, 5, -49, 10, 32, -45, 30, -90, -49, -12, -37, -53, 9, -17, -5, -54, -44, -10, 1, -48, -8, -61, -32, -71, -46, -41, -64, 11, -8, -47, 23, -67, -61, 7, -26, -29, 17, -22, -23, -79, 2, -8, -40, -48, -17, -73, 34, -68, -38, 30, -50, -2, -12, -10, -37, -13, -52, -15, -19, -4, 4, -12, 60, -58, -35, 45, -21, -65, 17, -33, 19, -13, 3, -15, -83, -32, 0, -77, 27, -44, -58, 
  -18, 8, 9, 9, 21, -20, -113, 48, 21, -55, -23, 11, 31, -9, -52, -25, -38, 9, 24, -10, -27, 35, -50, 10, -6, -63, -46, 9, -40, -2, -9, 8, 23, 8, 30, -18, 17, -10, -14, 14, -45, 5, -89, -67, -17, -12, 34, -2, -9, 0, 22, 12, -13, 1, -16, 36, 7, 34, 6, -35, 8, -16, -9, -3, 34, 8, 46, 36, -9, -20, 8, 19, 35, 3, -42, 72, 14, 19, 35, -36, -12, 33, -53, -15, 21, 27, 1, 11, -19, 37, 6, -17, -12, 40, -3, 23, -65, -5, 25, 22, -40, 25, 47, -20, 10, 25, -27, -18, 31, 22, 8, -31, -67, 13, -7, -2, -28, 19, 27, 2, 12, -8, 38, 1, 13, -5, -14, 14, -16, -41, -1, 20, 18, 57, 3, 31, 55, -2, 29, 21, -5, 26, -47, -23, -10, -53, -47, -46, 22, 27, -27, 4, 27, 19, -12, -38, 6, 2, -14, -22, -33, -62, -16, -27, -5, 30, 12, -45, 37, -10, -11, 25, -2, -11, 3, 27, -20, -31, -79, -62, 2, 5, 18, -32, -8, -9, 50, -28, -45, -50, -29, -23, -20, -34, -41, -16, -50, -52, -29, -30, -14, -44, 28, -2, -45, -35, 11, 31, 15, -9, -47, 8, -17, -14, 10, 15, -71, -6, -6, 9, 41, -70, 8, 14, -20, 8, -19, -29, 25, 27, -14, -8, -37, -55, -23, 27, -14, -44, 31, 26, -16, 10, -3, 6, 33, 43, 14, 28, 6, 7, -50, 40, 25, 1, -22, -9, -35, 2, -31, 4, -20, 18, -10, 18, 41, -1, 19, 4, 12, -7, 12, -34, 1, -5, 17, 44, -12, 17, 16, -10, 24, 3, 33, 41, 43, 0, -35, 59, -46, -32, 64, 36, 13, 34, 53, 20, 8, 42, -16, -14, 9, -68, -9, 8, 2, 38, 48, 27, -17, 42, 32, -2, 4, 52, -7, -38, 31, -85, 21, 14, 
  -45, 9, -11, -70, 12, -73, -2, -41, 10, 6, -10, 31, 15, -41, -28, -21, -17, -14, 38, -25, -29, 5, -36, -29, -30, -9, -55, -4, 0, -44, -4, 32, -15, 1, 17, -61, 5, -27, 14, 10, 51, 6, 22, -2, 16, 11, -38, -31, 16, -11, -3, -7, -2, -32, 5, -22, 14, 31, -12, 4, -3, -14, 21, -51, 8, -16, -34, 25, -5, -3, 23, 36, 6, -42, -30, 3, -7, 8, -3, 28, 47, 14, 5, 44, 44, 22, 4, -15, 9, 6, -14, -25, -28, 5, -53, 3, 1, 2, -61, -3, -2, -17, 11, 1, 37, -19, 41, -10, -1, 17, -45, 15, 18, 18, -8, 32, 3, 30, -23, 16, -18, -25, 28, -16, 5, -18, -5, 22, -32, -43, -19, 38, 2, -2, 14, 35, 5, -24, 10, 39, -32, -20, -30, -2, -8, 39, -49, -7, 19, -12, -4, 23, 32, -28, -25, 32, -17, 6, -37, 10, 27, 7, 10, -9, 3, -12, 19, -14, -2, 6, -13, -16, 19, -10, -50, 8, 12, -28, 1, -15, -3, -42, -15, 42, 13, -17, 20, 28, -8, 44, -32, -26, 14, 13, -55, -27, 1, -50, 46, -43, 2, 10, 60, -6, -7, 0, -4, 27, -17, -22, 14, -27, -7, 21, 12, 22, -46, -1, 43, 0, 18, -25, 40, 61, 25, 11, -16, -11, -35, -8, 40, 26, -42, -2, 41, -50, 42, -11, 49, 48, -8, 20, 20, -38, 21, 36, 3, -3, -4, 34, 4, -22, 14, -21, 4, 37, -32, 12, 58, 4, 46, 14, -10, 35, 25, 40, -8, -38, 53, -52, -5, 12, -90, -3, 1, 7, 22, 22, 10, 38, -22, 30, 25, -47, 33, -54, 9, -14, -62, 38, 50, -5, -5, -26, -13, 38, 18, 32, -2, -28, 31, -93, 14, 20, -8, 20, 3, 18, 0, -36, 13, 44, 8, -26, -23, -5, 30, -43, 11, 3, 
  -1, 3, 21, 19, -32, -43, -15, -25, -6, 21, 33, 38, 7, 17, 31, -2, 25, -23, -46, 31, -2, 12, 14, 10, 30, -2, 53, 30, -25, 55, -17, -7, 60, 21, -1, 22, 19, -27, -16, -15, 15, -6, -2, 63, 32, 61, -28, -17, -1, -2, 9, 4, 10, 1, -22, 26, -11, 18, 37, -11, 7, 39, -32, 6, -3, -56, 20, -17, -34, -17, -33, -35, -26, -5, 37, -30, -15, -31, 9, -38, 13, 2, -39, -9, -62, -28, -1, 19, 9, -33, 9, 46, -14, -48, -41, -22, 0, -3, -13, -31, -9, -35, 18, 22, 14, -57, 6, 1, -45, -28, -85, -15, -11, -31, 11, -21, -30, -40, -9, 45, -13, -67, -21, 24, -36, -40, -30, 5, 41, -34, -55, 21, 7, 33, 10, 29, -12, -8, -29, 21, -34, -12, -67, 19, 19, -51, -36, -8, -7, -34, -46, -6, -10, -5, 27, 42, -26, -8, -39, -27, 46, -41, -24, -26, 10, -58, -2, 27, 45, -42, 30, 67, -10, 8, -28, -31, 7, -33, -28, -36, 29, -4, -17, 17, 27, -39, 23, -23, -16, -28, -24, 43, 37, -55, -29, 1, -7, -3, -5, 16, 6, -37, 27, 39, -46, -34, -33, 23, 50, -32, -11, -3, 41, 27, -23, 36, -21, 11, 19, 0, -5, 24, -13, -11, 4, -49, -6, 28, 35, -15, -39, 44, 20, 7, 53, 65, 53, 14, -69, 42, -6, -17, -55, -16, 20, -16, 15, 24, 37, -13, -46, 22, 3, -15, -42, 32, -25, -3, -17, 18, 35, 5, -16, 81, 22, 23, 6, -20, 25, -45, -16, 5, 0, 54, 11, 38, 7, 37, 15, -27, 29, 21, 32, 13, 32, -7, 61, -1, -30, -14, 7, -6, 4, -15, 57, -12, 19, 28, 64, -24, 18, -15, 77, 38, 2, 21, -25, -9, -21, 27, 14, 28, 21, 61, 87, 29, 53, 1, 13, 73, 
  -52, -3, -24, 11, 27, 32, 8, 14, 17, 43, 11, -22, -23, -25, 10, 17, -12, -26, -41, -40, 0, 4, 57, 6, -11, -5, 23, -22, -6, -41, 46, 0, 0, -5, -7, -23, -18, -26, 28, 14, -16, 23, -46, 22, -8, -33, 35, 2, -37, -28, 44, -6, -18, 14, 10, 15, -20, 33, 1, 3, 24, -30, 32, 20, 15, 40, 9, -21, -10, -20, -5, 6, 4, -3, -20, 1, 0, -10, 68, 24, 40, 59, 46, 35, -16, 28, 32, 24, 26, 47, 25, -9, 19, 30, 36, 1, 11, 61, 23, 48, 15, 34, 38, 36, 1, 8, -2, 11, 27, 46, 29, 3, 15, 22, 24, 61, -3, 33, -11, -6, 16, 29, 20, 11, 11, 30, 28, 27, 13, -1, 31, 37, -12, 15, 13, -5, 12, -5, -1, -4, -28, -16, 4, 21, -48, 30, -27, -20, 15, 27, 23, -24, -31, -9, -14, -25, 1, 8, 13, 6, 2, -17, -16, -45, 43, 22, 1, -15, 11, 15, -51, -13, -18, -11, -22, 12, -13, -49, -46, -31, 8, 12, 5, 19, -33, 12, -28, -17, 29, -70, 12, -7, -73, 0, -2, -26, 17, 18, 31, 21, 22, 17, -42, -42, -21, -47, 41, -32, -12, -43, 8, 26, -1, -61, -83, -40, 12, -51, -56, -9, -72, 39, -96, -71, 20, -81, -67, 23, -25, -27, -68, -80, 34, -101, -56, -11, -41, 6, -55, -99, 18, -40, 0, 18, -11, -55, -17, -76, -21, -36, -15, 24, -106, -1, -53, -50, -14, -21, -74, 0, -69, -74, -73, -66, -26, -69, -30, 21, -68, 10, -119, -98, 17, -7, -72, -3, -47, -67, -56, -51, -8, -78, -15, 20, -91, 30, -32, -91, 15, -16, -59, 7, -21, -35, -9, -53, -4, -39, -49, 3, -72, 58, -72, -93, 55, 42, -38, 9, -38, -64, -41, -12, -42, -30, -52, 6, -98, 26, -33, -26, 
  33, -48, 8, -27, -21, 1, 20, -32, -33, -32, 29, 30, -7, -62, -45, 48, -6, -69, -12, -62, 1, 1, 19, 47, 11, -35, 51, -4, 30, -53, 6, 57, 29, -29, 21, -8, 0, 2, -7, 26, 28, -57, 21, 32, -7, -109, -42, 18, 22, -30, 38, 17, -32, -47, -71, -13, 10, -73, 15, -26, -3, -72, -56, 41, -22, -47, -47, -23, -17, -10, -46, 16, -1, -68, 13, 32, -12, -76, -64, 9, 8, 31, -11, -52, -32, -28, -21, 20, 18, 4, 1, -2, 8, -61, -9, -15, 11, -24, -26, -54, -7, 17, 13, 32, -30, -46, -63, 2, -6, -41, 15, -11, -1, 34, 0, -52, -30, -8, 23, -38, 22, -30, -10, -11, -22, -34, -21, 10, -2, 15, 21, 3, 3, -8, 27, -7, -49, -9, -16, -42, -41, 8, -11, -18, 4, 46, -20, -3, -5, -9, 1, -44, -68, 7, 39, -42, -2, 14, -3, 18, 38, 9, 4, -3, 3, -27, 21, -48, -13, 3, -24, -71, -5, 51, 26, -44, -18, 24, 37, 28, 1, -29, -14, -40, -33, 29, -35, -24, -41, 75, -15, -43, 17, 84, -43, 13, -14, 8, 10, -24, -57, 0, -39, 3, -35, 54, 26, -23, -6, 72, 39, 31, -17, -40, 15, -9, -32, 18, 25, 38, 9, 28, 81, -16, 8, -14, -40, 30, 28, 9, 34, -21, 20, -3, 38, 13, 20, -1, 47, -25, -31, 15, -15, 2, 10, -18, 49, -24, 1, -17, -1, 15, -27, -25, -3, 43, -38, 32, 8, 18, 22, 23, -19, -42, 26, -52, -27, 37, -3, -41, -17, 39, 22, -3, 30, -11, 24, -27, 50, 12, -19, 3, 18, -32, 22, -75, 6, 28, -14, -47, 21, -13, 19, 6, 17, 26, 39, -19, 15, -12, 30, -75, -28, 37, -3, -34, 30, -52, 10, -18, 3, 27, 25, -16, 2, -6, 15, -127, 10, 67, 
  12, 15, 4, -30, 2, 39, 12, 17, 7, -11, -46, -3, 7, 16, -66, -28, -29, -27, -44, -45, -4, 38, -24, -14, 28, -15, -31, -24, 8, -34, -6, -37, -25, 35, 14, 23, -26, 16, -27, 11, -34, -1, -18, -56, -24, 7, -3, -19, -54, 25, 13, 1, 5, 37, -39, -13, 15, -9, -36, -16, -56, -25, -21, -67, -35, 7, -3, -17, 16, 12, -8, -61, -24, -1, -6, -21, -9, -30, -12, -3, -64, 17, -7, -7, 9, 50, -11, 26, 0, -14, -7, -8, -29, 20, 19, 2, 6, -4, -22, 40, -30, 4, 6, -8, 25, -32, -22, -40, -27, 13, -9, -51, 11, 17, 41, 13, 10, 4, 35, -86, -29, -40, -53, -20, -28, 7, 33, -20, 41, 26, -55, 13, -7, -23, -11, -32, -58, 5, -22, -17, 5, -3, 23, -14, 24, 0, -2, 29, -32, -13, -16, 10, -10, -4, 7, -23, -24, 64, 22, 24, 2, -40, -9, 2, -45, -24, -12, 9, 1, -1, 20, 59, 16, 45, 6, -13, 5, 4, -27, 0, -58, -31, -21, -15, -10, -42, -13, 59, -11, 46, -46, 35, 40, -36, -12, -25, -34, -3, 29, 13, 11, -26, 35, 39, 26, -15, -41, -38, 34, 54, -10, -12, -5, -4, 22, 33, -8, 10, 25, 3, 46, -21, 18, -8, -29, 34, -35, -28, 47, 34, 6, 23, 39, 18, 34, 7, 5, 3, 4, -2, -20, 5, -28, -39, 65, 19, -6, 38, 47, 20, 70, 23, 59, -47, -13, 43, -27, 18, -25, 37, 48, 47, -13, -7, 27, -5, 20, -5, -22, 4, -10, 18, 66, -17, -48, -7, 27, -35, -29, 25, 56, 3, 6, 46, -2, -57, -60, 4, 5, -15, -22, -32, 11, -2, 9, 17, 11, -13, 31, 4, -7, -73, -2, 1, -35, -36, 33, 14, 24, 18, 50, -8, 50, -25, -10, -39, 12, -29, 22, -46, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 9,320 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0030167675577104092, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[9] = { 305, -35, -213, 113, 169, -812, 293, 75, -84, };
const TfArray<1, int> tensor_dimension11 = { 1, { 9 } };
const TfArray<1, float> quant11_scale = { 1, { 7.2322407504543662e-05, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,80,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.041530013084411621, } };
const TfArray<1, int> quant12_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,80,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.033328011631965637, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,80,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.033328011631965637, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,40,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.033328011631965637, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,40,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.033328011631965637, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,40,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.023973476141691208, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,40,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.023973476141691208, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,20,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.023973476141691208, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,320 } };
const TfArray<1, float> quant20_scale = { 1, { 0.023973476141691208, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,9 } };
const TfArray<1, float> quant21_scale = { 1, { 0.076945103704929352, } };
const TfArray<1, int> quant21_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,9 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1040, (TfLiteIntArray*)&tensor_dimension0, 1040, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 2880, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 36, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 1040, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1040, (TfLiteIntArray*)&tensor_dimension13, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension15, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension17, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension19, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension21, 9, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 9, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(size_t i, TfLiteEvalTensor *tensor) {
  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus trained_model_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteStatus trained_model_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
